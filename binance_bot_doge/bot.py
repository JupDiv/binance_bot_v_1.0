import time
from datetime import datetime, timedelta
from config import *
from binance_api import get_current_price, buy_market, sell_market, get_balance
from utils import percent_change, log_trade

# --- Load last buy from logs/trades.log
def load_last_buy():
    try:
        with open("logs/trades.log", "r") as f:
            lines = f.readlines()
            for line in reversed(lines):
                if "BUY DOGEUSDT" in line:
                    parts = line.strip().split("|")
                    price = float(parts[-1].split("=")[-1])
                    print(f"üîÅ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—é –ø–æ–∫—É–ø–∫—É: {price}")
                    return price
    except:
        pass
    return None

print("üìà Binance Bot –∑–∞–ø—É—â–µ–Ω–æ")

last_buy_price = load_last_buy()
has_position = last_buy_price is not None
last_buy_time = None

while True:
    time.sleep(INTERVAL_SECONDS)
    current_price = get_current_price(SYMBOL)
    print(f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ {SYMBOL}: {current_price}")

    usdt = get_balance('USDT')
    print(f"üíµ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å USDT: {usdt}")
    coin = SYMBOL.replace('USDT', '')
    asset_qty = get_balance(coin)

    # –Ø–∫—â–æ —î –ø–æ–∑–∏—Ü—ñ—è ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –ø—Ä–∏–±—É—Ç–æ–∫ –∞–±–æ –∑–±–∏—Ç–æ–∫
    if has_position:
        change = percent_change(last_buy_price, current_price)
        estimated_profit = (asset_qty * current_price) - (asset_qty * last_buy_price)

        print(f"üìä –ó–º—ñ–Ω–∞ –ø—ñ—Å–ª—è –∫—É–ø—ñ–≤–ª—ñ: {change:.2f}% | –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {estimated_profit:.4f} USDT")

        # –ü—Ä–æ–¥–∞—Ç–∏ –ø—Ä–∏ –ø—Ä–∏–±—É—Ç–∫—É
        if change >= PROFIT_THRESHOLD_PERCENT:
            print("‚úÖ –î–æ—Å—è–≥–Ω—É—Ç–æ —Ü—ñ–ª—ñ –ø–æ –ø—Ä–∏–±—É—Ç–∫—É. –ü—Ä–æ–¥–∞—î–º–æ.")
            result = sell_market(SYMBOL, asset_qty)
            log_trade("SELL (profit)", SYMBOL, asset_qty, current_price)
            has_position = False

        # –ü—Ä–æ–¥–∞—Ç–∏ –ø—Ä–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å—ñ
        elif change <= -2.5:
            print("üõë –°–ø—Ä–∞—Ü—é–≤–∞–≤ —Å—Ç–æ–ø-–ª–æ—Å—Å. –ü—Ä–æ–¥–∞—î–º–æ.")
            result = sell_market(SYMBOL, asset_qty)
            log_trade("SELL (stoploss)", SYMBOL, asset_qty, current_price)
            has_position = False

        else:
            print("‚è≥ –û—á—ñ–∫—É—î–º–æ –∫—Ä–∞—â–æ–≥–æ –º–æ–º–µ–Ω—Ç—É...")

    # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ–∑–∏—Ü—ñ—ó ‚Äî —á–µ–∫–∞—î–º–æ –ø—Ä–æ—Å–∞–¥–∫–∏
    else:
        ref_price = current_price * (1 + (MIN_CHANGE_PERCENT / 100))
        print(f"üîé –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞ —Ü—ñ–Ω–∞ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ: {ref_price}")

        if (
            current_price <= ref_price and
            usdt >= TRADE_AMOUNT_USDT and
            (last_buy_time is None or datetime.now() - last_buy_time >= timedelta(hours=1))
        ):
            print(f"üü¢ –ö—É–ø—É—î–º–æ {coin}...")
            result = buy_market(SYMBOL, TRADE_AMOUNT_USDT)
            last_buy_price = current_price
            log_trade("BUY", SYMBOL, result.get("executedQty", 0), current_price)
            has_position = True
            last_buy_time = datetime.now()
        else:
            print("üìâ –£–º–æ–≤–∏ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ –∞–±–æ —â–µ –Ω–µ –º–∏–Ω—É–ª–∞ –≥–æ–¥–∏–Ω–∞.")